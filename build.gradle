group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:4.0.1")
    }
}

apply plugin: 'net.serenity-bdd.serenity-gradle-plugin'
apply plugin: 'java'

ext {
    libs = [
            json: "com.googlecode.json-simple:json-simple:${jsonsimpleVersion}",
            test: [
                    serenity: [
                            core               : "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
                            junit              : "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
                            screenplay         : "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
                            screenplayWebdriver: "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
                            cucumber           : "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}",
                            rest               : "net.serenity-bdd:serenity-rest-assured:${serenityCoreVersion}",
                            serenityRest       : "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}"
                    ],
                    junit   : "junit:junit:${junitVersion}",
                    junit   : "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                    assertj : "org.assertj:assertj-core:${assertJVersion}",
                    hamcrest: "org.hamcrest:hamcrest-all:${hamcrestVersion}",
                    hamcrest: "org.hamcrest:hamcrest:${hamcrestVersion}"
            ]
    ]
}


dependencies {

    implementation libs.test.serenity.core,
            libs.test.serenity.screenplay,
            libs.test.serenity.junit,
            libs.test.serenity.screenplayWebdriver,
            libs.test.serenity.cucumber,
            libs.test.serenity.rest,
            libs.test.serenity.serenityRest,
            libs.test.junit,
            libs.test.assertj,
            libs.test.hamcrest,
            libs.json

    implementation "io.rest-assured:json-schema-validator:${schemaValidatorVersion}"
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    testImplementation "net.serenity-bdd:serenity-junit5:4.0.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testImplementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}",
            "junit:junit:${junitVersions}",
            "org.assertj:assertj-core:${assertJVersion}",
            "net.serenity-bdd:serenity-junit:${serenityCoreVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
}

tasks.withType(Test).configureEach {
    systemProperties System.getProperties()
    include '**/Runner**.class'
    testLogging {
        events "failed", "passed", "skipped"
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
